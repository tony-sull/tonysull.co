---
import type { CollectionEntry } from 'astro:content'
import readingTime from 'reading-time'
import { isoDate, shortDate } from '~/utils/dates.js'
import { Icon } from 'astro-icon/components'
import Avatar from './Avatar.astro'
import Show from './Show.astro'
import TagList from './TagList.astro'
import { getEntry } from 'astro:content'
import { Image } from 'astro:assets'

export type Props = CollectionEntry<'articles'>

const { body, data, render } = Astro.props

const { Content } = await render()

const minutes = readingTime(body)
const author = await getEntry(data.author)
---

<article class="h-entry">
  <header>
    <h1 class="p-name">{data.name}</h1>

    <Show when={data.published}>
      <time datetime={isoDate(data.published!)} class="dt-published"
        >{shortDate(data.published!)}</time
      >
      <strong slot="fallback">DRAFT</strong>
    </Show>

    <Avatar class="p-author" {author} />

    <p>
      <Icon name="clock" size={16} aria-hidden="true" role="img" />
      <span>{minutes.text}</span>
    </p>

    <Show when={data.category?.length}>
      <TagList tags={data.category!} class="tags" />
    </Show>

    <blockquote class="p-summary">{data.summary}</blockquote>

    <Show when={data.featured}>
      <Image
        class="u-photo"
        src={data.featured!}
        alt=""
        aria-hidden="true"
        loading="lazy"
        hidden
      />
    </Show>

    <a
      class="u-url"
      href={/*(data.url && new URL(data.url)) ||*/
      new URL(Astro.url.pathname, Astro.site)}
      hidden>See the full post</a>
  </header>

  <div class="e-content">
    <Content />
  </div>
</article>

<style>
  article {
    width: 100%;
    max-inline-size: var(--size-content-3);
  }

  header {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-template-areas: 'tags tags' 'title title' 'author author' 'published minutes' 'summary summary';
    align-items: center;
    column-gap: var(--size-fluid-2);
    margin-block-end: var(--size-fluid-3);
  }

  header h1 {
    grid-area: title;
    padding-block-end: var(--size-fluid-1);
  }

  header :global(.tags) {
    grid-area: tags;
  }

  header time {
    grid-area: published;
  }

  .p-summary {
    grid-area: summary;
    margin-top: var(--size-fluid-3);
    font-size: var(--font-size-fluid-1);
  }

  header :global(.p-author) {
    grid-area: author;
  }

  header p {
    grid-area: minutes;
    display: flex;
    align-items: center;
    gap: var(--size-2);
  }

  header p :global(svg) {
    opacity: 0.5;
  }

  h1 {
    font-size: var(--font-size-fluid-3);
  }

  h2 {
    font-size: var(--font-size-fluid-2);
  }

  h3,
  h4 {
    font-size: var(--font-size-fluid-1);
  }

  .e-content {
    text-align: justify;
  }

  .e-content :global(:is(h1, h2, h3, h4, h5, h6)) {
    margin-block-start: calc(1rem + 0.75em);
    margin-block-end: calc(0.5rem + 0.15em);
  }

  .e-content :global(p + p) {
    margin-block-start: 1rem;
  }

  .e-content :global(pre) {
    margin-block: 1rem;
    padding: var(--size-fluid-1);
    max-inline-size: unset;
  }

  .e-content :global(blockquote:not(.tweet-card)) {
    margin-block: var(--size-fluid-1);
    max-inline-size: unset;
  }

  .e-content :global(figure) {
    margin-block: var(--size-fluid-3);
  }

  .e-content :global(img, video, svg) {
    margin-inline: auto;
    border-radius: var(--radius-2);
  }

  @media (min-width: 640px) {
    header {
      grid-template-columns: auto 1fr auto;
      grid-template-areas: 'tags tags tags' 'title title title' 'author published minutes' 'summary summary summary';
      row-gap: var(--size-fluid-1);
    }

    header > ul {
      margin-block-start: var(--size-1);
    }

    .p-summary {
      margin-top: var(--size-fluid-2);
    }

    .p-category {
      letter-spacing: var(--font-letterspacing-2);
    }
  }
</style>
