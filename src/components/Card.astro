---
import type { CollectionEntry } from 'astro:content'
import Photo from '~/components/Photo.astro'
import { isoDate, shortDate } from '~/utils/dates.js'
import Avatar from './Avatar.astro'
import TagList from './TagList.astro'
import { isYoutubeVideo } from '~/utils/videos'
import { YouTube } from '@astro-community/astro-embed-youtube'

export type Props = {
  author: CollectionEntry<'personas'>
  href?: string
  date?: Date | null | undefined
  tags?: string[] | undefined
  photo?: CollectionEntry<'photos'>[] | ImageMetadata[] | undefined
  video?: string | string[] | undefined
  contentClass?: string
}

const { author, date, tags, photo = [], video, contentClass } = Astro.props

const singlePhoto = photo[0]
const singleVideo = Array.isArray(video) ? video[0] : video

const isEntry = singlePhoto && 'data' in singlePhoto
---

<article class="h-entry">
  <header class="p-author h-card">
    <Avatar class="p-author" author={author} />
    {
      date ? (
        <small>
          <time datetime={isoDate(date!)} class="dt-published">
            {shortDate(date!)}
          </time>
        </small>
      ) : (
        <small slot="fallback"> DRAFT</small>
      )
    }
    {tags && tags.length > 0 && <TagList tags={tags!} alt class="tags" />}
  </header>

  {
    singlePhoto && (
      <Photo
        zoomIn
        src={isEntry ? singlePhoto.data.photo : singlePhoto}
        alt={isEntry ? (singlePhoto.data.summary ?? "") : ""}
        caption={isEntry ? singlePhoto.data.name : undefined}
        class="u-fetaured"
        widths={[375, 522, 1044]}
        sizes="(min-width: 530px) 522px, 100vw"
      />
    )
  }

  {singleVideo && isYoutubeVideo(singleVideo) && <YouTube id={singleVideo} />}

  <div class:list={[contentClass, "e-content"]}>
    <slot />
  </div>

  <footer>
    <slot name="footer" />
  </footer>
</article>

<style>
  article {
    width: 100%;
    max-width: var(--size-content-2);
    display: flex;
    background: var(--surface-1);
    flex-direction: column;
    gap: var(--size-fluid-1);
    padding: var(--size-fluid-2);
    border-radius: var(--radius-3);
    box-shadow: var(--shadow-3);
  }

  header {
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: auto auto;
    grid-template-areas: "avatar published" "tags tags";
    align-items: center;
    column-gap: var(--size-fluid-1);
    row-gap: var(--size-fluid-1);
    margin-block-end: var(--size-fluid-2);
  }

  header :global(.tags) {
    grid-area: tags;
  }

  header :global(.h-author) {
    grid-area: avatar;
  }

  .u-featured {
    aspect-ratio: var(--ratio-widescreen);
    object-fit: cover;
    border-radius: var(--radius-2);
  }

  .dt-published {
    color: var(--gray-7);
  }

  :global([data-theme="dark"]) .dt-published {
    color: var(--gray-4);
  }

  a.e-content,
  a.e-content:visited {
    color: inherit;
  }

  footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-block-start: var(--size-fluid-1);
  }

  .e-content :global(p + p) {
    margin-block-start: 1rem;
  }

  .e-content :global(pre) {
    margin-block: 1rem;
    padding: var(--size-fluid-1);
    max-inline-size: unset;
  }

  .e-content :global(blockquote) {
    margin-block: 1rem;
    max-inline-size: unset;
  }

  .e-content :global(hr) {
    margin-block: var(--size-fluid-2);
  }
</style>
