---
import { getEntryBySlug } from 'astro:content'
import { isoDate, shortDate } from '~/utils/dates.js'
import Avatar from './Avatar.astro'
import Show from './Show.astro'
import TagList from './TagList.astro'

export type Props = {
  author?: string | undefined
  href?: string
  date?: Date | null | undefined
  tags?: string[] | undefined
  photo?: (string | undefined)[] | string | undefined
  contentClass?: string
}

const { author, href, date, tags, photo, contentClass } = Astro.props

const singlePhoto = Array.isArray(photo) ? photo[0] : photo
const localPhoto = singlePhoto ? await getEntryBySlug('photos', singlePhoto) : undefined
---

<article class="h-entry">
  <header class="p-author h-card">
    <Avatar class="p-author" author={author} />
    <Show when={date}>
      <small>
        <time datetime={isoDate(date!)} class="dt-published">
          {shortDate(date!)}
        </time>
      </small>

      <small slot="fallback"> DRAFT</small>
    </Show>
    <Show when={tags?.length}>
      <TagList tags={tags!} alt class="tags" />
    </Show>
  </header>

  <Show when={singlePhoto}>
    <Show when={localPhoto}>
      <figure>
        <img src={localPhoto?.data?.photo} alt={localPhoto!?.data?.name} class="u-featured" loading="lazy" />
        <figcaption>{localPhoto?.data?.summary}</figcaption>
      </figure>

      <img slot="fallback" src={singlePhoto} alt="" class="u-featured" loading="lazy" />
    </Show>
  </Show>

  <a href={href} class:list={[contentClass, 'e-content']}>
    <slot />
  </a>

  <footer>
    <slot name="footer" />
  </footer>
</article>

<style>
  article {
    width: 100%;
    max-width: var(--size-content-2);
    display: flex;
    background: var(--surface-1);
    flex-direction: column;
    gap: var(--size-fluid-1);
    padding: var(--size-fluid-2);
    border-radius: var(--radius-3);
    box-shadow: var(--shadow-3);
  }

  header {
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: auto auto;
    grid-template-areas: 'avatar published' 'tags tags';
    align-items: center;
    column-gap: var(--size-fluid-1);
    row-gap: var(--size-fluid-1);
    margin-block-end: var(--size-fluid-2);
  }

  header :global(.tags) {
    grid-area: tags;
  }

  header :global(.h-author) {
    grid-area: avatar;
  }

  .u-featured {
    aspect-ratio: var(--ratio-widescreen);
    object-fit: cover;
    border-radius: var(--radius-2);
  }

  .dt-published {
    color: var(--gray-7);
  }

  :global([data-theme='dark']) .dt-published {
    color: var(--gray-4);
  }

  a.e-content,
  a.e-content:visited {
    color: inherit;
  }

  footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-block-start: var(--size-fluid-1);
  }

  .e-content :global(p + p) {
    margin-block-start: 1rem;
  }

  .e-content :global(pre) {
    margin-block: 1rem;
    padding: var(--size-fluid-1);
    max-inline-size: unset;
  }

  .e-content :global(blockquote) {
    margin-block: 1rem;
    max-inline-size: unset;
  }
</style>
