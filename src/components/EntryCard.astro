---
import { type Entry, isArticle, isBookmark, isNote, Note } from '@data/entries.js'
import { isoDate, shortDate } from '@utils/dates.js'
import { getAuthor, getDate, getImage, getSummary, getTitle, getUrl, isExternalLink } from '@utils/entries.js'
import { Icon } from 'astro-icon'
import For from './For.astro'
import Share from './Share.astro'
import Show from './Show.astro'

export type Props = {
    entry: Entry
}

const { entry } = Astro.props

const title = getTitle(entry)
const summary = getSummary(entry)
const image = getImage(entry)
const url = getUrl(entry)
const date = getDate(entry)
const author = getAuthor(entry)

function getHandleName(handle: string) {
    return handle.slice(0, handle.indexOf('@'))
}

function getHandleDomain(handle: string) {
    const start = handle.indexOf('@')
    const end = handle.lastIndexOf('.')

    return handle.slice(start + 1, end >= 0 ? end : handle.length)
}
---

<article class="h-entry">
    <header class="p-author h-card">
        <div>
            <p class="p-name sr-only">{author.name}</p>
            <img src={author.avatar} alt="" class="u-logo" width="48" height="48" loading="lazy" />
        </div>
        <p class="p-nickname">
            <b>{getHandleName(author.handle)}</b>
            <span>@</span>
            <i>{getHandleDomain(author.handle)}</i>
            <span class="sr-only">{author.handle.slice(author.handle.lastIndexOf('.'))}</span>
        </p>
        <small><time datetime={isoDate(date)} class="dt-published">{shortDate(date)}</time></small>
        <Show when={entry.tags.length}>
            <ul>
                <For each={entry.tags}>
                    {(tag: string) => (
                        <li>
                            <small><a href={`/tags/${tag}/`} rel="category tag" class="p-category">#{tag}</a></small>
                        </li>
                    )}
                </For>
            </ul>
        </Show>
    </header>
    <Show when={image}>
        <img src={image} alt="" class="u-featured" loading="lazy" />
    </Show>
    <Show when={'title'}>
        <a href={url} class:list={[{ "u-bookmark-of": isBookmark(entry), "e-content": !isArticle(entry) }]} target={isExternalLink(url!) ? '_blank' : undefined}>
            <h2 class="p-name">{title}</h2>
        </a>
    </Show>
    <Show when={summary}>
        <p class="p-summary">{summary}</p>
    </Show>
    <footer>
        <Show when={isArticle(entry)}>
            <a href={url} class="u-url">Full article</a>
        </Show>
        <Show when={isBookmark(entry)}>
            <small>
                <Icon name="bookmark-solid" size={24} />
                <span>Bookmark</span>
            </small>
        </Show>
        <Show when={isNote(entry) && entry['in-reply-to']}>
            <small>In reply to
                <a href={(entry as Note)['in-reply-to']} class="u-in-reply-to">
                    {entry.metadata?.title}
                </a>
            </small>
        </Show>
        <Show when={entry.url}>
            <Share url={entry.url!} alt="Share a direct link to this post" />
        </Show>
    </footer>
</article>

<style>
    article {
        width: 100%;
        max-width: var(--size-content-2);
        display: flex;
        background: var(--surface-1);
        flex-direction: column;
        gap: var(--size-fluid-1);
        padding: var(--size-fluid-2);
        border-radius: var(--radius-3);
        box-shadow: var(--shadow-3);
    }

    header {
        display: grid;
        grid-template-columns: auto 1fr auto;
        grid-template-rows: auto auto;
        grid-template-areas: 'avatar nickname published' 'avatar tags tags';
        align-items: center;
        column-gap: var(--size-fluid-1);
        row-gap: var(--size-1);
    }

    header > :first-child {
        grid-area: avatar;
    }

    .u-logo {
        border-radius: var(--radius-round);
    }

    header > ul {
        display: flex;
        flex-wrap: wrap;
        gap: var(--size-4);
        margin: 0;
        padding: 0;
        list-style: none;
    }

    header li {
        padding: 0;
    }

    .p-category {
        color: var(--gray-7);
        font-weight: var(--font-weight-7);
        background: var(--surface-2);
        border-radius: var(--radius-2);
        padding: var(--size-1) var(--size-2);
    }

    :global([data-theme="dark"]) .p-category {
        color: var(--gray-3);
    }

    .u-featured {
        aspect-ratio: var(--ratio-widescreen);
        object-fit: cover;
    }

    .p-name {
        font-size: var(--font-size-3);
        font-weight: var(--font-weight-4);
        max-inline-size: 100%;

footer small span {
    opacity: 75%;
}
    }

    .dt-published {
        color: var(--gray-7);
    }

    :global([data-theme="dark"]) .dt-published {
        color: var(--gray-4);
    }
    
    [target="_blank"] > h2:after, .u-in-reply-to:after {
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 6H6a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-4M14 4h6m0 0v6m0-6L10 14'/%3E%3C/svg%3E");
        margin-inline-start: var(--size-1);
        opacity: 0.5;
    }

    :global([data-theme="dark"]) [target="_blank"] > h2:after, :global([data-theme="dark"]) .u-in-reply-to:after {
        filter: invert();
    }

    .e-content h2 {
        font-size: var(--font-size-2);
        color: var(--text-2);
        margin-block-start: var(--size-fluid-2);
    }

    footer {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-block-start: var(--size-fluid-1);
    }

    footer small {
        display: flex;
        align-items: center;
        gap: var(--size-1);
    }

    footer > :global(:only-child) {
        margin-inline-start: auto;
    }

    .u-url {
        font-size: var(--size-fluid-2);
    }

    .u-in-reply-to {
        font-style: italic;
    }
</style>