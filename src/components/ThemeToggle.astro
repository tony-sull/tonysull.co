<button
  id="theme-toggle"
  title="Toggles light & dark"
  aria-label="auto"
  aria-live="polite"
>
  <svg aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
    <circle
      class="sun"
      cx="12"
      cy="12"
      r="6"
      mask="url(#moon-mask)"
      fill="currentColor"></circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
  </svg>
</button>

<script is:global>
  const storageKey = 'pref:theme'

  const getColorPreference = () => {
    if (localStorage.getItem(storageKey))
      return localStorage.getItem(storageKey)
    else
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'
  }

  const theme = {
    value: getColorPreference(),
  }

  const onClick = () => {
    // flip current value
    theme.value = theme.value === 'light' ? 'dark' : 'light'

    setPreference()
  }

  const setPreference = () => {
    localStorage.setItem(storageKey, theme.value)
    reflectPreference()
  }

  const reflectPreference = () => {
    document.firstElementChild?.setAttribute('data-theme', theme.value)

    document
      .querySelector('#theme-toggle')
      ?.setAttribute('aria-label', theme.value)
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference()

  window.onload = () => {
    // set on load so screen readers can see latest value on the button
    reflectPreference()

    // now this script can find and listen for clicks on the control
    document.querySelector('#theme-toggle')?.addEventListener('click', onClick)
  }

  // sync with system changes
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', ({ matches: isDark }) => {
      theme.value = isDark ? 'dark' : 'light'
      setPreference()
    })
</script>

<style>
  button {
    --size: 2rem;

    background: none;
    border: none;
    padding: 0;

    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;

    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  svg {
    inline-size: 100%;
    block-size: 100%;
    stroke-linecap: round;
  }

  @media (hover: none) {
    button {
      --size: 48px;
    }
  }

  svg > :is(.moon, .sun, .sun-beams) {
    transform-origin: center center;
  }

  button:is(:hover, :focus-visible) > svg > :is(.moon, .sun) {
    fill: var(--gray-6);
  }

  svg > .sun-beams {
    stroke-width: 2px;
  }

  button:is(:hover, :focus-visible) > svg > .sun-beams {
    stroke: var(--gray-6);
  }

  :global([data-theme='dark']) svg > .sun {
    transform: scale(1.75);
  }

  :global([data-theme='dark']) svg > .sun-beams {
    opacity: 0;
  }

  :global([data-theme='dark']) svg > .moon > circle {
    transform: translateX(-7px);
  }

  @supports (cx: 1) {
    :global([data-theme='dark']) svg > .moon > circle {
      transform: translateX(0);
      cx: 17;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .sun {
      transition: transform 0.5s var(--ease-elastic-3);
    }

    svg > .sun-beams {
      transition: transform 0.5s var(--ease-elastic-4),
        opacity 0.5s var(--ease-3);
    }

    :global([data-theme='dark']) svg > .sun {
      transition-timing-function: var(--ease-3);
      transition-duration: 0.25s;
    }

    :global([data-theme='dark']) svg > .sun-beams {
      transform: rotateZ(-25deg);
      transition-duration: 0.15s;
    }

    svg .moon > circle {
      transition: transform 0.25s var(--ease-out-5);
    }

    @supports (cx: 1) {
      svg .moon > circle {
        transition: cx 0.25s var(--ease-out-5);
      }
    }

    :global([data-theme='dark']) svg > .moon > circle {
      transition-delay: 0.25s;
      transition-duration: 0.5s;
    }
  }
</style>
